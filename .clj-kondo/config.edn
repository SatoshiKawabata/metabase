{:config-paths ["macros"]

 :linters
 {:unresolved-symbol
  {:exclude [schema= re=
             (metabase.util/prog1 [<>])
             (metabase.mbql.util/match-one)
             (metabase.mbql.util/match)
             (metabase.mbql.util.match/match)
             (metabase.mbql.util.match/match-one)
             (metabase.mbql.util.match/replace)
             (metabase.mbql.util/replace)
             (metabase.mbql.util/replace-in)
             (metabase.query-processor.middleware.cache-backend.interface/with-cached-results)
             (metabase.util.regex/rx [opt])
             (metabase.async.streaming-response/streaming-response)
             (clojure.core.logic/fresh)
             (clojure.core.logic/matcha)
             (clojure.core.logic/run)]}

  :consistent-alias
  {:level   :error
   :aliases {cheshire.core                       json
             clojure.core.cache                  cache
             clojure.core.logic                  l
             clojure.core.match                  match
             clojure.data                        data
             clojure.java.io                     io
             clojure.java.jdbc                   jdbc
             clojure.math.numeric-tower          math
             clojure.set                         set
             clojure.string                      str
             clojure.tools.logging               log
             clojure.walk                        walk
             compojure.core                      compojure
             environ.core                        env
             honeysql.core                       hsql
             java-time                           t
             medley.core                         m
             metabase.api.common                 api
             metabase.config                     config
             metabase.db                         mdb
             metabase.driver                     driver
             metabase.driver.common              driver.common
             metabase.driver.sql.query-processor sql.qp
             metabase.driver.util                driver.u
             metabase.events                     events
             metabase.mbql.schema                mbql.s
             metabase.mbql.util                  mbql.u
             metabase.models.collection.root     collection.root
             metabase.models.setting             setting
             metabase.plugins.classloader        classloader
             metabase.public-settings            public-settings
             metabase.query-processor            qp
             metabase.query-processor.error-type qp.error-type
             metabase.query-processor.pivot      qp.pivot
             metabase.query-processor.reducible  qp.reducible
             metabase.query-processor.store      qp.store
             metabase.query-processor.util       qp.util
             metabase.server                     server
             metabase.server.handler             handler
             metabase.setup                      setup
             metabase.task                       task
             metabase.test                       mt
             metabase.util                       u
             metabase.util.date-2                u.date
             metabase.util.honeysql-extensions   hx
             metabase.util.i18n                  i18n
             metabase.util.schema                su
             potemkin                            p
             potemkin.types                      p.types
             schema.core                         s
             stencil.core                        stencil
             toucan.db                           db
             yaml.core                           yaml}}

  ;; additional optional linters
  :docstring-leading-trailing-whitespace {:level :warning}
  :missing-docstring                     {:level :warning}
  :refer-all                             {:level :warning, :exclude [clojure.test]}
  :single-key-in                         {:level :warning}
  :unsorted-required-namespaces          {:level :warning}
  :used-underscored-binding              {:level :warning}
  #_:docstring-no-summary                #_ {:level :warning} ; broken -- see https://github.com/clj-kondo/clj-kondo/issues/1507

  ;; WARN, not WARNING => log a warning but don't fail
  :shadowed-var   {:level :warn}
  :deprecated-var {:level :warn}

  ;; TODO: clj-kondo should have a way to disable this in certain macro calls like
  ;; metabase.mbql.util.match/replace
  :unexpected-recur    {:level :off}
  :unused-referred-var {:exclude {compojure.core [GET DELETE POST PUT]}}}

 :lint-as
 {metabase.api.common/let-404                                           clojure.core/let
  metabase.db.data-migrations/defmigration                              clojure.core/def
  metabase.query-processor.error-type/deferror                          clojure.core/def
  metabase.models.setting/defsetting                                    clj-kondo.lint-as/def-catch-all
  metabase.mbql.schema.macros/defclause                                 clj-kondo.lint-as/def-catch-all
  metabase.public-settings.premium-features/define-premium-feature      clojure.core/def
  metabase.sync.util/sum-for                                            clojure.core/for
  metabase.sync.util/with-emoji-progress-bar                            clojure.core/let
  metabase.driver.sql-jdbc.execute.diagnostic/capturing-diagnostic-info clojure.core/fn
  metabase.util.files/with-open-path-to-resource                        clojure.core/let
  metabase.db.liquibase/with-liquibase                                  clojure.core/let
  metabase.models.setting.multi-setting/define-multi-setting            clojure.core/def
  metabase.integrations.ldap/with-ldap-connection                       clojure.core/fn
  toucan.db/with-call-counting                                          clojure.core/fn

  potemkin.types/defprotocol+        clojure.core/defprotocol
  potemkin/defprotocol+              clojure.core/defprotocol
  potemkin.types/defrecord+          clojure.core/defrecord
  potemkin/defrecord+                clojure.core/defrecord
  potemkin.types/deftype+            clojure.core/deftype
  potemkin/deftype+                  clojure.core/deftype
  clojurewerkz.quartzite.jobs/defjob clojure.core/defn}

 :hooks
 {:analyze-call {metabase.test.data/dataset        hooks.metabase.test.data/dataset
                 metabase.test/dataset             hooks.metabase.test.data/dataset
                 metabase.test.data/$ids           hooks.metabase.test.data/$ids
                 metabase.test/$ids                hooks.metabase.test.data/$ids
                 metabase.test.data/mbql-query     hooks.metabase.test.data/$ids
                 metabase.test/mbql-query          hooks.metabase.test.data/$ids
                 metabase.test.data/run-mbql-query hooks.metabase.test.data/$ids
                 metabase.test/run-mbql-query      hooks.metabase.test.data/$ids}
  :macroexpand  {metabase.api.common/defendpoint*                      metabase.api.common/defendpoint*
                 metabase.api.common/defendpoint                       metabase.api.common/defendpoint
                 metabase.api.common/defendpoint-async                 metabase.api.common/defendpoint
                 metabase.query-processor.streaming/streaming-response metabase.query-processor.streaming/streaming-response
                 toucan.models/defmodel                                toucan.models/defmodel}}

 :config-in-comment
 {:linters {:unresolved-symbol {:level :off}}}}
